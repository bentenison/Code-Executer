// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: admClient.proto

package admClient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_CompleteChallenge_FullMethodName     = "/proto.AdminService/CompleteChallenge"
	AdminService_CompleteQuestion_FullMethodName      = "/proto.AdminService/CompleteQuestion"
	AdminService_UpdateUserMetrics_FullMethodName     = "/proto.AdminService/UpdateUserMetrics"
	AdminService_UpdateUserPerformance_FullMethodName = "/proto.AdminService/UpdateUserPerformance"
	AdminService_AddSubmissionStats_FullMethodName    = "/proto.AdminService/AddSubmissionStats"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AdminService defines the methods available.
type AdminServiceClient interface {
	CompleteChallenge(ctx context.Context, in *CompleteChallengeRequest, opts ...grpc.CallOption) (*CompleteChallengeResponse, error)
	CompleteQuestion(ctx context.Context, in *CompleteQuestionRequest, opts ...grpc.CallOption) (*CompleteQuestionResponse, error)
	UpdateUserMetrics(ctx context.Context, in *UpdateUserMetricsRequest, opts ...grpc.CallOption) (*UpdateUserMetricsResponse, error)
	UpdateUserPerformance(ctx context.Context, in *UpdateUserPerformanceRequest, opts ...grpc.CallOption) (*UpdateUserPerformanceResponse, error)
	AddSubmissionStats(ctx context.Context, in *AddSubmissionStatsRequest, opts ...grpc.CallOption) (*AddSubmissionStatsResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CompleteChallenge(ctx context.Context, in *CompleteChallengeRequest, opts ...grpc.CallOption) (*CompleteChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteChallengeResponse)
	err := c.cc.Invoke(ctx, AdminService_CompleteChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CompleteQuestion(ctx context.Context, in *CompleteQuestionRequest, opts ...grpc.CallOption) (*CompleteQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteQuestionResponse)
	err := c.cc.Invoke(ctx, AdminService_CompleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUserMetrics(ctx context.Context, in *UpdateUserMetricsRequest, opts ...grpc.CallOption) (*UpdateUserMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserMetricsResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateUserMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUserPerformance(ctx context.Context, in *UpdateUserPerformanceRequest, opts ...grpc.CallOption) (*UpdateUserPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPerformanceResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateUserPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSubmissionStats(ctx context.Context, in *AddSubmissionStatsRequest, opts ...grpc.CallOption) (*AddSubmissionStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSubmissionStatsResponse)
	err := c.cc.Invoke(ctx, AdminService_AddSubmissionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
//
// AdminService defines the methods available.
type AdminServiceServer interface {
	CompleteChallenge(context.Context, *CompleteChallengeRequest) (*CompleteChallengeResponse, error)
	CompleteQuestion(context.Context, *CompleteQuestionRequest) (*CompleteQuestionResponse, error)
	UpdateUserMetrics(context.Context, *UpdateUserMetricsRequest) (*UpdateUserMetricsResponse, error)
	UpdateUserPerformance(context.Context, *UpdateUserPerformanceRequest) (*UpdateUserPerformanceResponse, error)
	AddSubmissionStats(context.Context, *AddSubmissionStatsRequest) (*AddSubmissionStatsResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) CompleteChallenge(context.Context, *CompleteChallengeRequest) (*CompleteChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteChallenge not implemented")
}
func (UnimplementedAdminServiceServer) CompleteQuestion(context.Context, *CompleteQuestionRequest) (*CompleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteQuestion not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUserMetrics(context.Context, *UpdateUserMetricsRequest) (*UpdateUserMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMetrics not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUserPerformance(context.Context, *UpdateUserPerformanceRequest) (*UpdateUserPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPerformance not implemented")
}
func (UnimplementedAdminServiceServer) AddSubmissionStats(context.Context, *AddSubmissionStatsRequest) (*AddSubmissionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubmissionStats not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_CompleteChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CompleteChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CompleteChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CompleteChallenge(ctx, req.(*CompleteChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CompleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CompleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CompleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CompleteQuestion(ctx, req.(*CompleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUserMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUserMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUserMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUserMetrics(ctx, req.(*UpdateUserMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUserPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUserPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUserPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUserPerformance(ctx, req.(*UpdateUserPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSubmissionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubmissionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSubmissionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddSubmissionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSubmissionStats(ctx, req.(*AddSubmissionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompleteChallenge",
			Handler:    _AdminService_CompleteChallenge_Handler,
		},
		{
			MethodName: "CompleteQuestion",
			Handler:    _AdminService_CompleteQuestion_Handler,
		},
		{
			MethodName: "UpdateUserMetrics",
			Handler:    _AdminService_UpdateUserMetrics_Handler,
		},
		{
			MethodName: "UpdateUserPerformance",
			Handler:    _AdminService_UpdateUserPerformance_Handler,
		},
		{
			MethodName: "AddSubmissionStats",
			Handler:    _AdminService_AddSubmissionStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admClient.proto",
}
